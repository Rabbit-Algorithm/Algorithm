package 문제풀이.BFS.침투_13565;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.ArrayDeque;import java.util.Queue;public class Main_황병수 {    static int M, N;    static int[][] map;    static boolean[][] visited;    static int[] dy = {-1, 1, 0, 0};    static int[] dx = {0, 0, -1, 1};    static class Point {        int y, x;        Point(int y, int x) {            this.y = y;            this.x = x;        }    }    public static void main(String[] args) throws IOException {        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        String[] split = br.readLine().split(" ");        M = Integer.parseInt(split[0]);        N = Integer.parseInt(split[1]);        map = new int[M][N];        visited = new boolean[M][N];        for (int i = 0; i < M; i++) {            String[] splitText = br.readLine().split("");            for (int j = 0; j < N; j++) {               map[i][j] = Integer.parseInt(splitText[j]);            }        }        boolean possible = false;        // 0행(맨 윗줄)에서 0인 곳마다 BFS 시도        for (int j = 0; j < N; j++) {            if (!visited[0][j] && map[0][j] == 0) {                if (bfs(new Point(0, j))) {                    possible = true;                    break;                }            }        }        System.out.println(possible ? "YES" : "NO");    }    private static boolean bfs(Point start) {        Queue<Point> queue = new ArrayDeque<>();        queue.add(start);        visited[start.y][start.x] = true;        while (!queue.isEmpty()) {            Point cur = queue.poll();            if (cur.y == M - 1) return true; // 맨 아래 도달            for (int d = 0; d < 4; d++) {                int ny = cur.y + dy[d];                int nx = cur.x + dx[d];                if (ny >= 0 && ny < M && nx >= 0 && nx < N) {                    if (!visited[ny][nx] && map[ny][nx] == 0) {                        visited[ny][nx] = true;                        queue.add(new Point(ny, nx));                    }                }            }        }        return false;    }}